package com.muyi.numbers.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.muyi.numbers.entity.District;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISTRICT".
*/
public class DistrictDao extends AbstractDao<District, Long> {

    public static final String TABLENAME = "DISTRICT";

    /**
     * Properties of entity District.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdminCode = new Property(1, String.class, "adminCode", false, "ADMIN_CODE");
        public final static Property ParentAdminCode = new Property(2, String.class, "parentAdminCode", false, "PARENT_ADMIN_CODE");
        public final static Property LevelType = new Property(3, String.class, "levelType", false, "LEVEL_TYPE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property ShortName = new Property(5, String.class, "shortName", false, "SHORT_NAME");
        public final static Property Pinyin = new Property(6, String.class, "pinyin", false, "PINYIN");
        public final static Property MergerName = new Property(7, String.class, "mergerName", false, "MERGER_NAME");
        public final static Property CityCode = new Property(8, String.class, "cityCode", false, "CITY_CODE");
        public final static Property ZipCode = new Property(9, String.class, "zipCode", false, "ZIP_CODE");
        public final static Property Lng = new Property(10, String.class, "lng", false, "LNG");
        public final static Property Lat = new Property(11, String.class, "lat", false, "LAT");
    }


    public DistrictDao(DaoConfig config) {
        super(config);
    }
    
    public DistrictDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISTRICT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADMIN_CODE\" TEXT," + // 1: adminCode
                "\"PARENT_ADMIN_CODE\" TEXT," + // 2: parentAdminCode
                "\"LEVEL_TYPE\" TEXT," + // 3: levelType
                "\"NAME\" TEXT," + // 4: name
                "\"SHORT_NAME\" TEXT," + // 5: shortName
                "\"PINYIN\" TEXT," + // 6: pinyin
                "\"MERGER_NAME\" TEXT," + // 7: mergerName
                "\"CITY_CODE\" TEXT," + // 8: cityCode
                "\"ZIP_CODE\" TEXT," + // 9: zipCode
                "\"LNG\" TEXT," + // 10: lng
                "\"LAT\" TEXT);"); // 11: lat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISTRICT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, District entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String adminCode = entity.getAdminCode();
        if (adminCode != null) {
            stmt.bindString(2, adminCode);
        }
 
        String parentAdminCode = entity.getParentAdminCode();
        if (parentAdminCode != null) {
            stmt.bindString(3, parentAdminCode);
        }
 
        String levelType = entity.getLevelType();
        if (levelType != null) {
            stmt.bindString(4, levelType);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(6, shortName);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(7, pinyin);
        }
 
        String mergerName = entity.getMergerName();
        if (mergerName != null) {
            stmt.bindString(8, mergerName);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(9, cityCode);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(10, zipCode);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(11, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(12, lat);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, District entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String adminCode = entity.getAdminCode();
        if (adminCode != null) {
            stmt.bindString(2, adminCode);
        }
 
        String parentAdminCode = entity.getParentAdminCode();
        if (parentAdminCode != null) {
            stmt.bindString(3, parentAdminCode);
        }
 
        String levelType = entity.getLevelType();
        if (levelType != null) {
            stmt.bindString(4, levelType);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(6, shortName);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(7, pinyin);
        }
 
        String mergerName = entity.getMergerName();
        if (mergerName != null) {
            stmt.bindString(8, mergerName);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(9, cityCode);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(10, zipCode);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(11, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(12, lat);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public District readEntity(Cursor cursor, int offset) {
        District entity = new District( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // adminCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentAdminCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // levelType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shortName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pinyin
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mergerName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cityCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // zipCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lng
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // lat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, District entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdminCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentAdminCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLevelType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShortName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPinyin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMergerName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCityCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setZipCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLng(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLat(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(District entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(District entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(District entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
